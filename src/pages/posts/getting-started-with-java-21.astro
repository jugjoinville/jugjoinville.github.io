---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Getting Started with Java 21">
  <article class="max-w-3xl mx-auto">
    <header class="mb-8">
      <h1 class="text-4xl font-bold text-java-orange mb-4">Getting Started with Java 21</h1>
      <p class="text-gray-400">March 15, 2024</p>
    </header>

    <div class="space-y-6 text-gray-300">
      <p>
        Java 21, the latest Long Term Support (LTS) release, brings several exciting features that enhance developer productivity and application performance. Let's explore some of the key features that make Java 21 a significant update.
      </p>

      <h2 class="text-2xl font-bold text-java-blue">Virtual Threads</h2>
      <p>
        One of the most anticipated features in Java 21 is the introduction of virtual threads. Virtual threads are lightweight threads that make it easier to write, maintain, and debug concurrent applications.
      </p>
      <pre class="bg-gray-900 p-4 rounded-lg"><code>// Using virtual threads
try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    IntStream.range(0, 10_000).forEach(i -> {
        executor.submit(() -> {
            Thread.sleep(Duration.ofSeconds(1));
            return i;
        });
    });
}</code></pre>

      <h2 class="text-2xl font-bold text-blue-600">Pattern Matching for Switch</h2>
      <p>
        Pattern matching for switch expressions and statements enhances the switch construct's capabilities, making it more powerful and expressive.
      </p>
      <pre class="bg-gray-900 p-4 rounded-lg"><code>static String formatValue(Object obj) {
    return switch (obj) {
        case Integer i -> String.format("int %d", i);
        case Long l    -> String.format("long %d", l);
        case Double d  -> String.format("double %f", d);
        case String s  -> String.format("String %s", s);
        case null     -> "null";
        default       -> obj.toString();
    };
}</code></pre>

      <h2 class="text-2xl font-bold text-java-blue">Record Patterns</h2>
      <p>
        Record patterns extend pattern matching to deconstruct record values, making it easier to work with complex data structures.
      </p>

      <h2 class="text-2xl font-bold text-java-blue">Conclusion</h2>
      <p>
        Java 21 represents a significant step forward for the platform, offering features that improve both developer productivity and application performance. Whether you're building concurrent applications, working with complex data structures, or looking to write more expressive code, Java 21 has something to offer.
      </p>
    </div>
  </article>
</Layout>